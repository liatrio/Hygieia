#Database Name - default is test
dbname=dashboard

#Database HostName - default is localhost
dbhost=172.17.0.2

#Database Port - default is 27017
dbport=27017

#Database Username - default is blank
dbusername=db

#Database Password - default is blank
dbpassword=dbpass

feature.dynamicPipeline=disabled
systemConfig.multipleDeploymentServers=false

#Collector schedule (required)
feature.cron=0 * * * * *

#Page size for data calls (Jira maxes at 1000)
feature.pageSize=1000

#In-built folder housing prepared REST queries (required)
feature.queryFolder=jiraapi-queries

#Jira API Query file names (String template requires the files to have .st extension) (required)
feature.storyQuery=story
feature.epicQuery=epic
feature.projectQuery=projectinfo
feature.memberQuery=memberinfo
feature.sprintQuery=sprintinfo
feature.teamQuery=teaminfo
feature.trendingQuery=trendinginfo

#Jira Connection Details
feature.jiraProxyUrl=
feature.jiraProxyPort=

# Trending Query:  Number of days in a sprint (not-required)
feature.sprintDays=60

# Trending Query:  Length of sprint week (not-required)
feature.sprintEndPrior=7

#Scheduled Job prior minutes to recover data created during execution time (usually, 2 minutes is enough)
feature.scheduledPriorMin=2

#Delta change date that modulates the collector item task - should be about as far back as possible, in ISO format (required)
feature.deltaCollectorItemStartDate=2008-01-01T00:00:00.000000

# Change to your JIRA SERVER along with credentials below
#Jira Connection Details
feature.jiraBaseUrl=https://jira.com
feature.jiraQueryEndpoint=rest/api/2/

#64-bit encoded credentials with the pattern username:password
#on a mac you con create them with : echo "username:password" | base64
#reference:  https://www.base64decode.org/
feature.jiraCredentials=someEncodedString

#OAuth2.0 token credentials (currently not supported in this version)
feature.jiraOauthAuthtoken=sdfghjkl==
feature.jiraOauthRefreshtoken=sdfagheh==
feature.jiraOauthRedirecturi=uri.this.is.test:uri
feature.jiraOauthExpiretime=234567890987

#Start dates from which to begin collector data, if no other data is present - usually, a month back is appropriate (required)
feature.deltaStartDate=2016-11-01T00:00:00.000000
feature.masterStartDate=2016-09-01T00:00:00.000000

# In Jira, general IssueType IDs are associated to various "issue"
# attributes. However, there is one attribute which this collector's
# queries rely on that change between different instantiations of Jira.
# Please provide a String Name reference to your instance's IssueType for
# the lowest level of Issues (e.g., "user story") specific to your Jira
# instance.  Note:  You can retrieve your instance's IssueType Name
# listings via the following URI:  https://[your-jira-domain-name]/rest/api/2/issuetype/
# Multiple comma-separated values can be specified.
feature.jiraIssueTypeNames=Story

# In Jira, your instance will have its own custom field created for "sprint" or "timebox" details,
# which includes a list of information.  This field allows you to specify that data field for your
# instance of Jira. Note: You can retrieve your instance's sprint data field name
# via the following URI, and look for a package name com.atlassian.greenhopper.service.sprint.Sprint;
# your custom field name describes the values in this field:
# https://[your-jira-domain-name]/rest/api/2/issue/[some-issue-name]
feature.jiraSprintDataFieldName=customfield_10007

# In Jira, your instance will have its own custom field created for "super story" or "epic" back-end ID,
# which includes a list of information.  This field allows you to specify that data field for your instance
# of Jira.  Note:  You can retrieve your instance's epic ID field name via the following URI where your
# queried user story issue has a super issue (e.g., epic) tied to it; your custom field name describes the
# epic value you expect to see, and is the only field that does this for a given issue:
# https://[your-jira-domain-name]/rest/api/2/issue/[some-issue-name]
feature.jiraEpicIdFieldName=customfield_10400

# In Jira, your instance will have its own custom field created for "story points"
# This field allows you to specify that data field for your instance
# of Jira.  Note:  You can retrieve your instance's storypoints ID field name via the following URI where your
# queried user story issue has story points set on it; your custom field name describes the
# story points value you expect to see:
# https://[your-jira-domain-name]/rest/api/2/issue/[some-issue-name]
feature.jiraStoryPointsFieldName=customfield_10002

# In Jira, your instance will have its own custom field created for "team"
# This field allows you to specify that data field for your instance
# of Jira.  Note:  You can retrieve your instance's team ID field name via the following URI where your
# queried user story issue has team set on it; your custom field name describes the
# team value you expect to see:
# https://[your-jira-domain-name]/rest/api/2/issue/[some-issue-name]
feature.jiraTeamFieldName=customfield_10703


#Collector schedule (required)
git.cron=0 0/5 * * * *

# Change to your BITBUCKET SERVER along with credentials below
#mandatory
git.host=https://bitbucket.com
git.api=/rest/api/1.0/

#Maximum number of days to go back in time when fetching commits. Only applicable to Bitbucket Cloud.
git.commitThresholdDays=15

#Page size for rest calls. Only applicable to Bitbucket Server.
git.pageSize=25

#Bitbucket product
# Set to "cloud" to use Bitbucket Cloud (formerly known as Bitbucket)
# Set to "server" to use Bitbucket Server (formerly known as Stash)
# More information can be found here: href="https://github.com/capitalone/Hygieia/issues/609
git.product=server

#Collector schedule (required)
jenkins.cron=0 * * * * *

#Jenkins server (required) - Can provide multiple
#jenkins.servers[0]=http://jenkins.company.com
#Another option: If using same username/password Jenkins auth - set username/apiKey to use HTTP Basic Auth (blank=no auth)
#jenkins.usernames[0]=user
#jenkins.apiKeys[0]=12345

# Change to your JENKINS SERVER along with credentials below
jenkins.servers[0]=https://jenkins.com
jenkins.usernames[0]=
jenkins.apiKeys[0]=
jenkins.niceNames[0]=

#Determines if build console log is collected - defaults to false
jenkins.saveLog=true

#map the entry localhost so URLS in jenkins resolve properly
# Docker NATs the real host localhost to 10.0.2.2 when running in docker
# as localhost is stored in the JSON payload from jenkins we need
# this hack to fix the addresses
jenkins.dockerLocalHostIP=

#Collector schedule (required)
sonar.cron=0 0/5 * * * *

# Change to your SONAR SERVER along with credentials below
sonar.servers[0]=https://sonar.com

#Sonar Authentication Username - default is blank
sonar.username=

#Sonar Authentication Password - default is blank
sonar.password=

#Sonar Metrics
sonar.metrics=ncloc,line_coverage,violations,critical_violations,major_violations,blocker_violations,sqale_index,test_success_density,test_failures,test_errors,tests

#Collector schedule (required)
udeploy.cron=0 0/5 * * * *

# Change to your UCD SERVER along with credentials below
#UDeploy server (required) - Can provide multiple
udeploy.servers[0]=https://udeploy.com
udeploy.niceNames[0]=UCD

#UDeploy user name (required)
udeploy.username=ucduser

#UDeploy password (required)
udeploy.password=password
